# /etc/fail2ban/filter.d/caddy-auth.conf
# Detects auth failures and common scanner probes from Caddy JSON logs.
# Matches:
#   1) Any request from <HOST> that returns 401 or 403
#   2) Requests to high-risk probe paths (wp-login.php, .env, .git, phpmyadmin, etc.)
#      even if they return 404/401/403
#
# Assumes your Caddy logs include fields "request.remote_ip", "request.uri", and "status"
# and are written as JSON lines (format json).

[Definition]

# Fail on explicit auth failures
failregex = ^.*"request":\{.*"remote_ip":"<HOST>".*\}.*"status":(?:401|403).*$

# Fail on known malicious/probe paths, even when 404
# (Keep this list focused to avoid false positives)
failregex = ^.*"request":\{.*"remote_ip":"<HOST>".*"uri":"\/(?:wp-login\.php|wp-admin(?:\/|$)|xmlrpc\.php|\.env(?:\.bak|\.old)?|\.git(?:\/|$)|vendor\/|composer\.(?:json|lock)|phpmyadmin(?:\/|$)|admin(?:\/|$)|user\/login|umbraco(?:\/|$)|owa(?:\/|$)|HNAP1|manager\/html|boaform\/admin)[^"]*".*\}.*"status":(?:404|401|403).*$

# Ignore health checks from localhost or a local reverse proxy if any
ignoreregex = ^.*"request":\{.*"remote_ip":"127\.0\.0\.1".*\}.*$

# No datepattern needed; JSON lines are matched as a whole.
# Use with jail:
#   [caddy-auth]
#   enabled  = true
#   filter   = caddy-auth
#   logpath  = /var/log/caddy/*.log
#   maxretry = 6
#   findtime = 10m
#   bantime  = 2h
